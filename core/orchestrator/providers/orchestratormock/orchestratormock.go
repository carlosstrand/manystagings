// Code generated by MockGen. DO NOT EDIT.
// Source: orchestrator.go

// Package orchestratormock is a generated GoMock package.
package orchestratormock

import (
	context "context"
	reflect "reflect"

	orchestrator "github.com/carlosstrand/manystagings/core/orchestrator"
	gomock "github.com/golang/mock/gomock"
)

// MockOrchestrator is a mock of Orchestrator interface.
type MockOrchestrator struct {
	ctrl     *gomock.Controller
	recorder *MockOrchestratorMockRecorder
}

// MockOrchestratorMockRecorder is the mock recorder for MockOrchestrator.
type MockOrchestratorMockRecorder struct {
	mock *MockOrchestrator
}

// NewMockOrchestrator creates a new mock instance.
func NewMockOrchestrator(ctrl *gomock.Controller) *MockOrchestrator {
	mock := &MockOrchestrator{ctrl: ctrl}
	mock.recorder = &MockOrchestratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrchestrator) EXPECT() *MockOrchestratorMockRecorder {
	return m.recorder
}

// CreateDeployment mocks base method.
func (m *MockOrchestrator) CreateDeployment(ctx context.Context, deployment *orchestrator.Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployment", ctx, deployment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDeployment indicates an expected call of CreateDeployment.
func (mr *MockOrchestratorMockRecorder) CreateDeployment(ctx, deployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockOrchestrator)(nil).CreateDeployment), ctx, deployment)
}

// CreateNamespace mocks base method.
func (m *MockOrchestrator) CreateNamespace(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespace", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNamespace indicates an expected call of CreateNamespace.
func (mr *MockOrchestratorMockRecorder) CreateNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockOrchestrator)(nil).CreateNamespace), ctx, namespace)
}

// DeleteDeployment mocks base method.
func (m *MockOrchestrator) DeleteDeployment(ctx context.Context, deployment *orchestrator.Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", ctx, deployment)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeployment indicates an expected call of DeleteDeployment.
func (mr *MockOrchestratorMockRecorder) DeleteDeployment(ctx, deployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockOrchestrator)(nil).DeleteDeployment), ctx, deployment)
}

// Provider mocks base method.
func (m *MockOrchestrator) Provider() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provider")
	ret0, _ := ret[0].(string)
	return ret0
}

// Provider indicates an expected call of Provider.
func (mr *MockOrchestratorMockRecorder) Provider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provider", reflect.TypeOf((*MockOrchestrator)(nil).Provider))
}

// Settings mocks base method.
func (m *MockOrchestrator) Settings() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Settings")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Settings indicates an expected call of Settings.
func (mr *MockOrchestratorMockRecorder) Settings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Settings", reflect.TypeOf((*MockOrchestrator)(nil).Settings))
}
